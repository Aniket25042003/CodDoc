import { type NextRequest, NextResponse } from "next/server"

// Backend API URL - change this to your deployed FastAPI URL in production
const BACKEND_URL = process.env.BACKEND_URL || "https://coddoc.onrender.com"

export async function POST(request: NextRequest) {
  try {
    const { repo_url } = await request.json()

    if (!repo_url) {
      return NextResponse.json({ error: "Repository URL is required" }, { status: 400 })
    }

    console.log(`Processing repository: ${repo_url}`)

    try {
      // Call the FastAPI backend
      const response = await fetch(`${BACKEND_URL}/generate-readme`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ repo_url }),
      })

      if (response.ok) {
        const data = await response.json()
        console.log("Successfully received data from backend")
        return NextResponse.json({
          readme: data.readme,
          log: data.log || [],
          decisions: data.decisions || [],
          thread_id: data.thread_id || null
        })
      } else {
        console.error(`Backend returned status ${response.status}`)
        const errorData = await response.json().catch(() => ({ error: "Unknown error" }))
        console.error("Backend error details:", errorData)
        throw new Error(`Backend error: ${errorData.error || response.statusText}`)
      }
    } catch (backendError) {
      console.error("Backend connection failed:", backendError)
      
      // Fallback to demo content when backend is unavailable
      const repoName = repo_url.split("/").pop() || "Repository"
      const fallbackReadme = `# ${repoName}

## 🚀 Project Description

This repository contains a modern application built with cutting-edge technologies. The project demonstrates best practices in software development and provides a solid foundation for further development.

*Note: This is a fallback README generated when the AI backend is unavailable.*

## ✨ Features

- **Modern Architecture**: Built with the latest technologies and patterns
- **Responsive Design**: Works seamlessly across all devices
- **Performance Optimized**: Fast loading and smooth user experience
- **Well Documented**: Comprehensive documentation and examples
- **Type Safe**: Full TypeScript support for better development experience

## 🛠️ Installation

\`\`\`bash
# Clone the repository
git clone ${repo_url}

# Navigate to the project directory
cd ${repoName}

# Install dependencies
npm install

# Start the development server
npm run dev
\`\`\`

## 📖 Usage

After installation, you can start using the application by running the development server. The application will be available at \`http://localhost:3000\`.

### Basic Usage

\`\`\`javascript
// Example usage
import { Component } from './${repoName}'

const app = new Component({
  // Configuration options
})

app.start()
\`\`\`

## 🏗️ Project Structure

\`\`\`
${repoName}/
├── src/
│   ├── components/
│   ├── utils/
│   └── index.js
├── docs/
├── tests/
└── package.json
\`\`\`

## 🧪 Testing

Run the test suite with:

\`\`\`bash
npm test
\`\`\`

## 🤝 Contributing

Contributions are welcome! Please feel free to submit a Pull Request. For major changes, please open an issue first to discuss what you would like to change.

1. Fork the repository
2. Create your feature branch (\`git checkout -b feature/AmazingFeature\`)
3. Commit your changes (\`git commit -m 'Add some AmazingFeature'\`)
4. Push to the branch (\`git push origin feature/AmazingFeature\`)
5. Open a Pull Request

## 📄 License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## 🙏 Acknowledgments

- Thanks to all contributors who have helped shape this project
- Special thanks to the open source community
- Built with ❤️ by the development team

---

*This README was generated by CodDoc - AI-powered documentation generation.*`

      return NextResponse.json({ 
        readme: fallbackReadme,
        log: ["Backend unavailable, using fallback content"],
        decisions: [],
        thread_id: null
      })
    }

  } catch (error) {
    console.error("Error in API route:", error)
    return NextResponse.json({ error: "Failed to generate README" }, { status: 500 })
  }
}
